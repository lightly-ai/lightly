# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lightly.openapi_generated.swagger_client.configuration import Configuration


class DockerWorkerConfigV2DockerDatasource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bypass_verify': 'bool',
        'enable_datapool_update': 'bool',
        'process_all': 'bool'
    }

    attribute_map = {
        'bypass_verify': 'bypassVerify',
        'enable_datapool_update': 'enableDatapoolUpdate',
        'process_all': 'processAll'
    }

    def __init__(self, bypass_verify=None, enable_datapool_update=None, process_all=None, _configuration=None):  # noqa: E501
        """DockerWorkerConfigV2DockerDatasource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bypass_verify = None
        self._enable_datapool_update = None
        self._process_all = None
        self.discriminator = None

        if bypass_verify is not None:
            self.bypass_verify = bypass_verify
        if enable_datapool_update is not None:
            self.enable_datapool_update = enable_datapool_update
        if process_all is not None:
            self.process_all = process_all

    @property
    def bypass_verify(self):
        """Gets the bypass_verify of this DockerWorkerConfigV2DockerDatasource.  # noqa: E501


        :return: The bypass_verify of this DockerWorkerConfigV2DockerDatasource.  # noqa: E501
        :rtype: bool
        """
        return self._bypass_verify

    @bypass_verify.setter
    def bypass_verify(self, bypass_verify):
        """Sets the bypass_verify of this DockerWorkerConfigV2DockerDatasource.


        :param bypass_verify: The bypass_verify of this DockerWorkerConfigV2DockerDatasource.  # noqa: E501
        :type: bool
        """

        self._bypass_verify = bypass_verify

    @property
    def enable_datapool_update(self):
        """Gets the enable_datapool_update of this DockerWorkerConfigV2DockerDatasource.  # noqa: E501


        :return: The enable_datapool_update of this DockerWorkerConfigV2DockerDatasource.  # noqa: E501
        :rtype: bool
        """
        return self._enable_datapool_update

    @enable_datapool_update.setter
    def enable_datapool_update(self, enable_datapool_update):
        """Sets the enable_datapool_update of this DockerWorkerConfigV2DockerDatasource.


        :param enable_datapool_update: The enable_datapool_update of this DockerWorkerConfigV2DockerDatasource.  # noqa: E501
        :type: bool
        """

        self._enable_datapool_update = enable_datapool_update

    @property
    def process_all(self):
        """Gets the process_all of this DockerWorkerConfigV2DockerDatasource.  # noqa: E501


        :return: The process_all of this DockerWorkerConfigV2DockerDatasource.  # noqa: E501
        :rtype: bool
        """
        return self._process_all

    @process_all.setter
    def process_all(self, process_all):
        """Sets the process_all of this DockerWorkerConfigV2DockerDatasource.


        :param process_all: The process_all of this DockerWorkerConfigV2DockerDatasource.  # noqa: E501
        :type: bool
        """

        self._process_all = process_all

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DockerWorkerConfigV2DockerDatasource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerWorkerConfigV2DockerDatasource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DockerWorkerConfigV2DockerDatasource):
            return True

        return self.to_dict() != other.to_dict()
