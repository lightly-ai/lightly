# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lightly.openapi_generated.swagger_client.configuration import Configuration


class DockerWorkerRegistryEntryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoObjectID',
        'user_id': 'str',
        'name': 'DockerWorkerName',
        'worker_type': 'DockerWorkerType',
        'state': 'DockerWorkerState',
        'created_at': 'Timestamp',
        'last_modified_at': 'Timestamp',
        'labels': 'DockerWorkerLabels',
        'docker_version': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'name': 'name',
        'worker_type': 'workerType',
        'state': 'state',
        'created_at': 'createdAt',
        'last_modified_at': 'lastModifiedAt',
        'labels': 'labels',
        'docker_version': 'dockerVersion'
    }

    def __init__(self, id=None, user_id=None, name=None, worker_type=None, state=None, created_at=None, last_modified_at=None, labels=None, docker_version=None, _configuration=None):  # noqa: E501
        """DockerWorkerRegistryEntryData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user_id = None
        self._name = None
        self._worker_type = None
        self._state = None
        self._created_at = None
        self._last_modified_at = None
        self._labels = None
        self._docker_version = None
        self.discriminator = None

        self.id = id
        self.user_id = user_id
        self.name = name
        self.worker_type = worker_type
        self.state = state
        self.created_at = created_at
        self.last_modified_at = last_modified_at
        self.labels = labels
        if docker_version is not None:
            self.docker_version = docker_version

    @property
    def id(self):
        """Gets the id of this DockerWorkerRegistryEntryData.  # noqa: E501


        :return: The id of this DockerWorkerRegistryEntryData.  # noqa: E501
        :rtype: MongoObjectID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DockerWorkerRegistryEntryData.


        :param id: The id of this DockerWorkerRegistryEntryData.  # noqa: E501
        :type: MongoObjectID
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this DockerWorkerRegistryEntryData.  # noqa: E501


        :return: The user_id of this DockerWorkerRegistryEntryData.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DockerWorkerRegistryEntryData.


        :param user_id: The user_id of this DockerWorkerRegistryEntryData.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this DockerWorkerRegistryEntryData.  # noqa: E501


        :return: The name of this DockerWorkerRegistryEntryData.  # noqa: E501
        :rtype: DockerWorkerName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DockerWorkerRegistryEntryData.


        :param name: The name of this DockerWorkerRegistryEntryData.  # noqa: E501
        :type: DockerWorkerName
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def worker_type(self):
        """Gets the worker_type of this DockerWorkerRegistryEntryData.  # noqa: E501


        :return: The worker_type of this DockerWorkerRegistryEntryData.  # noqa: E501
        :rtype: DockerWorkerType
        """
        return self._worker_type

    @worker_type.setter
    def worker_type(self, worker_type):
        """Sets the worker_type of this DockerWorkerRegistryEntryData.


        :param worker_type: The worker_type of this DockerWorkerRegistryEntryData.  # noqa: E501
        :type: DockerWorkerType
        """
        if self._configuration.client_side_validation and worker_type is None:
            raise ValueError("Invalid value for `worker_type`, must not be `None`")  # noqa: E501

        self._worker_type = worker_type

    @property
    def state(self):
        """Gets the state of this DockerWorkerRegistryEntryData.  # noqa: E501


        :return: The state of this DockerWorkerRegistryEntryData.  # noqa: E501
        :rtype: DockerWorkerState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DockerWorkerRegistryEntryData.


        :param state: The state of this DockerWorkerRegistryEntryData.  # noqa: E501
        :type: DockerWorkerState
        """
        if self._configuration.client_side_validation and state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this DockerWorkerRegistryEntryData.  # noqa: E501


        :return: The created_at of this DockerWorkerRegistryEntryData.  # noqa: E501
        :rtype: Timestamp
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DockerWorkerRegistryEntryData.


        :param created_at: The created_at of this DockerWorkerRegistryEntryData.  # noqa: E501
        :type: Timestamp
        """
        if self._configuration.client_side_validation and created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this DockerWorkerRegistryEntryData.  # noqa: E501


        :return: The last_modified_at of this DockerWorkerRegistryEntryData.  # noqa: E501
        :rtype: Timestamp
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this DockerWorkerRegistryEntryData.


        :param last_modified_at: The last_modified_at of this DockerWorkerRegistryEntryData.  # noqa: E501
        :type: Timestamp
        """
        if self._configuration.client_side_validation and last_modified_at is None:
            raise ValueError("Invalid value for `last_modified_at`, must not be `None`")  # noqa: E501

        self._last_modified_at = last_modified_at

    @property
    def labels(self):
        """Gets the labels of this DockerWorkerRegistryEntryData.  # noqa: E501


        :return: The labels of this DockerWorkerRegistryEntryData.  # noqa: E501
        :rtype: DockerWorkerLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DockerWorkerRegistryEntryData.


        :param labels: The labels of this DockerWorkerRegistryEntryData.  # noqa: E501
        :type: DockerWorkerLabels
        """
        if self._configuration.client_side_validation and labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def docker_version(self):
        """Gets the docker_version of this DockerWorkerRegistryEntryData.  # noqa: E501


        :return: The docker_version of this DockerWorkerRegistryEntryData.  # noqa: E501
        :rtype: str
        """
        return self._docker_version

    @docker_version.setter
    def docker_version(self, docker_version):
        """Sets the docker_version of this DockerWorkerRegistryEntryData.


        :param docker_version: The docker_version of this DockerWorkerRegistryEntryData.  # noqa: E501
        :type: str
        """

        self._docker_version = docker_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DockerWorkerRegistryEntryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerWorkerRegistryEntryData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DockerWorkerRegistryEntryData):
            return True

        return self.to_dict() != other.to_dict()
