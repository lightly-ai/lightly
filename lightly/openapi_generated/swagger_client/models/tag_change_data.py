# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TagChangeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sharpness': 'list[float]',
        'sampling_slider': 'int'
    }

    attribute_map = {
        'sharpness': 'sharpness',
        'sampling_slider': 'sampling slider'
    }

    def __init__(self, sharpness=None, sampling_slider=None):  # noqa: E501
        """TagChangeData - a model defined in Swagger"""  # noqa: E501
        self._sharpness = None
        self._sampling_slider = None
        self.discriminator = None
        if sharpness is not None:
            self.sharpness = sharpness
        if sampling_slider is not None:
            self.sampling_slider = sampling_slider

    @property
    def sharpness(self):
        """Gets the sharpness of this TagChangeData.  # noqa: E501


        :return: The sharpness of this TagChangeData.  # noqa: E501
        :rtype: list[float]
        """
        return self._sharpness

    @sharpness.setter
    def sharpness(self, sharpness):
        """Sets the sharpness of this TagChangeData.


        :param sharpness: The sharpness of this TagChangeData.  # noqa: E501
        :type: list[float]
        """

        self._sharpness = sharpness

    @property
    def sampling_slider(self):
        """Gets the sampling_slider of this TagChangeData.  # noqa: E501


        :return: The sampling_slider of this TagChangeData.  # noqa: E501
        :rtype: int
        """
        return self._sampling_slider

    @sampling_slider.setter
    def sampling_slider(self, sampling_slider):
        """Sets the sampling_slider of this TagChangeData.


        :param sampling_slider: The sampling_slider of this TagChangeData.  # noqa: E501
        :type: int
        """

        self._sampling_slider = sampling_slider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagChangeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagChangeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
