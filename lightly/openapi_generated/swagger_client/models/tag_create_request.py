# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TagCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'TagName',
        'prev_tag': 'TagName',
        'list_of_sample_ids': 'list[MongoObjectID]',
        'changes': 'TagChangeData'
    }

    attribute_map = {
        'name': 'name',
        'prev_tag': 'prevTag',
        'list_of_sample_ids': 'listOfSampleIds',
        'changes': 'changes'
    }

    def __init__(self, name=None, prev_tag=None, list_of_sample_ids=None, changes=None):  # noqa: E501
        """TagCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._prev_tag = None
        self._list_of_sample_ids = None
        self._changes = None
        self.discriminator = None
        self.name = name
        self.prev_tag = prev_tag
        self.list_of_sample_ids = list_of_sample_ids
        self.changes = changes

    @property
    def name(self):
        """Gets the name of this TagCreateRequest.  # noqa: E501


        :return: The name of this TagCreateRequest.  # noqa: E501
        :rtype: TagName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagCreateRequest.


        :param name: The name of this TagCreateRequest.  # noqa: E501
        :type: TagName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def prev_tag(self):
        """Gets the prev_tag of this TagCreateRequest.  # noqa: E501


        :return: The prev_tag of this TagCreateRequest.  # noqa: E501
        :rtype: TagName
        """
        return self._prev_tag

    @prev_tag.setter
    def prev_tag(self, prev_tag):
        """Sets the prev_tag of this TagCreateRequest.


        :param prev_tag: The prev_tag of this TagCreateRequest.  # noqa: E501
        :type: TagName
        """
        if prev_tag is None:
            raise ValueError("Invalid value for `prev_tag`, must not be `None`")  # noqa: E501

        self._prev_tag = prev_tag

    @property
    def list_of_sample_ids(self):
        """Gets the list_of_sample_ids of this TagCreateRequest.  # noqa: E501


        :return: The list_of_sample_ids of this TagCreateRequest.  # noqa: E501
        :rtype: list[MongoObjectID]
        """
        return self._list_of_sample_ids

    @list_of_sample_ids.setter
    def list_of_sample_ids(self, list_of_sample_ids):
        """Sets the list_of_sample_ids of this TagCreateRequest.


        :param list_of_sample_ids: The list_of_sample_ids of this TagCreateRequest.  # noqa: E501
        :type: list[MongoObjectID]
        """
        if list_of_sample_ids is None:
            raise ValueError("Invalid value for `list_of_sample_ids`, must not be `None`")  # noqa: E501

        self._list_of_sample_ids = list_of_sample_ids

    @property
    def changes(self):
        """Gets the changes of this TagCreateRequest.  # noqa: E501


        :return: The changes of this TagCreateRequest.  # noqa: E501
        :rtype: TagChangeData
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this TagCreateRequest.


        :param changes: The changes of this TagCreateRequest.  # noqa: E501
        :type: TagChangeData
        """
        if changes is None:
            raise ValueError("Invalid value for `changes`, must not be `None`")  # noqa: E501

        self._changes = changes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
