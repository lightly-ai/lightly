# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lightly.openapi_generated.swagger_client.configuration import Configuration


class DockerWorkerConfigV3LightlyTrainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gpus': 'int',
        'max_epochs': 'int',
        'precision': 'LightlyTrainerPrecisionV3'
    }

    attribute_map = {
        'gpus': 'gpus',
        'max_epochs': 'maxEpochs',
        'precision': 'precision'
    }

    def __init__(self, gpus=None, max_epochs=None, precision=None, _configuration=None):  # noqa: E501
        """DockerWorkerConfigV3LightlyTrainer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._gpus = None
        self._max_epochs = None
        self._precision = None
        self.discriminator = None

        if gpus is not None:
            self.gpus = gpus
        if max_epochs is not None:
            self.max_epochs = max_epochs
        if precision is not None:
            self.precision = precision

    @property
    def gpus(self):
        """Gets the gpus of this DockerWorkerConfigV3LightlyTrainer.  # noqa: E501


        :return: The gpus of this DockerWorkerConfigV3LightlyTrainer.  # noqa: E501
        :rtype: int
        """
        return self._gpus

    @gpus.setter
    def gpus(self, gpus):
        """Sets the gpus of this DockerWorkerConfigV3LightlyTrainer.


        :param gpus: The gpus of this DockerWorkerConfigV3LightlyTrainer.  # noqa: E501
        :type: int
        """

        self._gpus = gpus

    @property
    def max_epochs(self):
        """Gets the max_epochs of this DockerWorkerConfigV3LightlyTrainer.  # noqa: E501


        :return: The max_epochs of this DockerWorkerConfigV3LightlyTrainer.  # noqa: E501
        :rtype: int
        """
        return self._max_epochs

    @max_epochs.setter
    def max_epochs(self, max_epochs):
        """Sets the max_epochs of this DockerWorkerConfigV3LightlyTrainer.


        :param max_epochs: The max_epochs of this DockerWorkerConfigV3LightlyTrainer.  # noqa: E501
        :type: int
        """

        self._max_epochs = max_epochs

    @property
    def precision(self):
        """Gets the precision of this DockerWorkerConfigV3LightlyTrainer.  # noqa: E501


        :return: The precision of this DockerWorkerConfigV3LightlyTrainer.  # noqa: E501
        :rtype: LightlyTrainerPrecisionV3
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this DockerWorkerConfigV3LightlyTrainer.


        :param precision: The precision of this DockerWorkerConfigV3LightlyTrainer.  # noqa: E501
        :type: LightlyTrainerPrecisionV3
        """

        self._precision = precision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DockerWorkerConfigV3LightlyTrainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerWorkerConfigV3LightlyTrainer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DockerWorkerConfigV3LightlyTrainer):
            return True

        return self.to_dict() != other.to_dict()
