# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



try:
    # Pydantic >=v1.10.17
    from pydantic.v1 import BaseModel, Field
except ImportError:
    # Pydantic v1
    from pydantic import BaseModel, Field
from lightly.openapi_generated.swagger_client.models.task_annotation_savings import TaskAnnotationSavings

class AnnotationSavings(BaseModel):
    """
    AnnotationSavings
    """
    image_classification: TaskAnnotationSavings = Field(..., alias="imageClassification")
    object_detection: TaskAnnotationSavings = Field(..., alias="objectDetection")
    semantic_segmentation: TaskAnnotationSavings = Field(..., alias="semanticSegmentation")
    __properties = ["imageClassification", "objectDetection", "semanticSegmentation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True
        use_enum_values = True
        extra = "forbid"

    def to_str(self, by_alias: bool = False) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.dict(by_alias=by_alias))

    def to_json(self, by_alias: bool = False) -> str:
        """Returns the JSON representation of the model"""
        return json.dumps(self.to_dict(by_alias=by_alias))

    @classmethod
    def from_json(cls, json_str: str) -> AnnotationSavings:
        """Create an instance of AnnotationSavings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, by_alias: bool = False):
        """Returns the dictionary representation of the model"""
        _dict = self.dict(by_alias=by_alias,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of image_classification
        if self.image_classification:
            _dict['imageClassification' if by_alias else 'image_classification'] = self.image_classification.to_dict(by_alias=by_alias)
        # override the default output from pydantic by calling `to_dict()` of object_detection
        if self.object_detection:
            _dict['objectDetection' if by_alias else 'object_detection'] = self.object_detection.to_dict(by_alias=by_alias)
        # override the default output from pydantic by calling `to_dict()` of semantic_segmentation
        if self.semantic_segmentation:
            _dict['semanticSegmentation' if by_alias else 'semantic_segmentation'] = self.semantic_segmentation.to_dict(by_alias=by_alias)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AnnotationSavings:
        """Create an instance of AnnotationSavings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AnnotationSavings.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in AnnotationSavings) in the input: " + str(obj))

        _obj = AnnotationSavings.parse_obj({
            "image_classification": TaskAnnotationSavings.from_dict(obj.get("imageClassification")) if obj.get("imageClassification") is not None else None,
            "object_detection": TaskAnnotationSavings.from_dict(obj.get("objectDetection")) if obj.get("objectDetection") is not None else None,
            "semantic_segmentation": TaskAnnotationSavings.from_dict(obj.get("semanticSegmentation")) if obj.get("semanticSegmentation") is not None else None
        })
        return _obj

