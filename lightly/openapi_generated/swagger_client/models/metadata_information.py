# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict
try:
    # Pydantic >=v1.10.17
    from pydantic.v1 import BaseModel, Field
except ImportError:
    # Pydantic v1
    from pydantic import BaseModel, Field
from lightly.openapi_generated.swagger_client.models.categorical_distribution_per_set import CategoricalDistributionPerSet
from lightly.openapi_generated.swagger_client.models.numeric_distribution_per_set import NumericDistributionPerSet

class MetadataInformation(BaseModel):
    """
    MetadataInformation
    """
    lightly_numeric: Dict[str, NumericDistributionPerSet] = Field(..., alias="lightlyNumeric")
    custom_numeric: Dict[str, NumericDistributionPerSet] = Field(..., alias="customNumeric")
    custom_categorical: Dict[str, CategoricalDistributionPerSet] = Field(..., alias="customCategorical")
    __properties = ["lightlyNumeric", "customNumeric", "customCategorical"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True
        use_enum_values = True
        extra = "forbid"

    def to_str(self, by_alias: bool = False) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.dict(by_alias=by_alias))

    def to_json(self, by_alias: bool = False) -> str:
        """Returns the JSON representation of the model"""
        return json.dumps(self.to_dict(by_alias=by_alias))

    @classmethod
    def from_json(cls, json_str: str) -> MetadataInformation:
        """Create an instance of MetadataInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, by_alias: bool = False):
        """Returns the dictionary representation of the model"""
        _dict = self.dict(by_alias=by_alias,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in lightly_numeric (dict)
        _field_dict = {}
        if self.lightly_numeric:
            for _key in self.lightly_numeric:
                if self.lightly_numeric[_key]:
                    _field_dict[_key] = self.lightly_numeric[_key].to_dict(by_alias=by_alias)
            _dict['lightlyNumeric' if by_alias else 'lightly_numeric'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in custom_numeric (dict)
        _field_dict = {}
        if self.custom_numeric:
            for _key in self.custom_numeric:
                if self.custom_numeric[_key]:
                    _field_dict[_key] = self.custom_numeric[_key].to_dict(by_alias=by_alias)
            _dict['customNumeric' if by_alias else 'custom_numeric'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in custom_categorical (dict)
        _field_dict = {}
        if self.custom_categorical:
            for _key in self.custom_categorical:
                if self.custom_categorical[_key]:
                    _field_dict[_key] = self.custom_categorical[_key].to_dict(by_alias=by_alias)
            _dict['customCategorical' if by_alias else 'custom_categorical'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MetadataInformation:
        """Create an instance of MetadataInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MetadataInformation.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in MetadataInformation) in the input: " + str(obj))

        _obj = MetadataInformation.parse_obj({
            "lightly_numeric": dict(
                (_k, NumericDistributionPerSet.from_dict(_v))
                for _k, _v in obj.get("lightlyNumeric").items()
            )
            if obj.get("lightlyNumeric") is not None
            else None,
            "custom_numeric": dict(
                (_k, NumericDistributionPerSet.from_dict(_v))
                for _k, _v in obj.get("customNumeric").items()
            )
            if obj.get("customNumeric") is not None
            else None,
            "custom_categorical": dict(
                (_k, CategoricalDistributionPerSet.from_dict(_v))
                for _k, _v in obj.get("customCategorical").items()
            )
            if obj.get("customCategorical") is not None
            else None
        })
        return _obj

