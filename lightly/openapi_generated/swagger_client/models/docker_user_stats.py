# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lightly.openapi_generated.swagger_client.configuration import Configuration


class DockerUserStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_id': 'str',
        'action': 'str',
        'data': 'object',
        'timestamp': 'Timestamp',
        'pip_version': 'str',
        'docker_version': 'str'
    }

    attribute_map = {
        'run_id': 'runId',
        'action': 'action',
        'data': 'data',
        'timestamp': 'timestamp',
        'pip_version': 'pipVersion',
        'docker_version': 'dockerVersion'
    }

    def __init__(self, run_id=None, action=None, data=None, timestamp=None, pip_version=None, docker_version=None, _configuration=None):  # noqa: E501
        """DockerUserStats - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._run_id = None
        self._action = None
        self._data = None
        self._timestamp = None
        self._pip_version = None
        self._docker_version = None
        self.discriminator = None

        self.run_id = run_id
        self.action = action
        self.data = data
        self.timestamp = timestamp
        self.pip_version = pip_version
        self.docker_version = docker_version

    @property
    def run_id(self):
        """Gets the run_id of this DockerUserStats.  # noqa: E501


        :return: The run_id of this DockerUserStats.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this DockerUserStats.


        :param run_id: The run_id of this DockerUserStats.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")  # noqa: E501

        self._run_id = run_id

    @property
    def action(self):
        """Gets the action of this DockerUserStats.  # noqa: E501


        :return: The action of this DockerUserStats.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DockerUserStats.


        :param action: The action of this DockerUserStats.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def data(self):
        """Gets the data of this DockerUserStats.  # noqa: E501


        :return: The data of this DockerUserStats.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DockerUserStats.


        :param data: The data of this DockerUserStats.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def timestamp(self):
        """Gets the timestamp of this DockerUserStats.  # noqa: E501


        :return: The timestamp of this DockerUserStats.  # noqa: E501
        :rtype: Timestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DockerUserStats.


        :param timestamp: The timestamp of this DockerUserStats.  # noqa: E501
        :type: Timestamp
        """
        if self._configuration.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def pip_version(self):
        """Gets the pip_version of this DockerUserStats.  # noqa: E501


        :return: The pip_version of this DockerUserStats.  # noqa: E501
        :rtype: str
        """
        return self._pip_version

    @pip_version.setter
    def pip_version(self, pip_version):
        """Sets the pip_version of this DockerUserStats.


        :param pip_version: The pip_version of this DockerUserStats.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and pip_version is None:
            raise ValueError("Invalid value for `pip_version`, must not be `None`")  # noqa: E501

        self._pip_version = pip_version

    @property
    def docker_version(self):
        """Gets the docker_version of this DockerUserStats.  # noqa: E501


        :return: The docker_version of this DockerUserStats.  # noqa: E501
        :rtype: str
        """
        return self._docker_version

    @docker_version.setter
    def docker_version(self, docker_version):
        """Sets the docker_version of this DockerUserStats.


        :param docker_version: The docker_version of this DockerUserStats.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and docker_version is None:
            raise ValueError("Invalid value for `docker_version`, must not be `None`")  # noqa: E501

        self._docker_version = docker_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DockerUserStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerUserStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DockerUserStats):
            return True

        return self.to_dict() != other.to_dict()
