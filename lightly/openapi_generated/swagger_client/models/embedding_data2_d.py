# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
try:
    # Pydantic >=v1.10.17
    from pydantic.v1 import BaseModel, Field, StrictFloat, StrictInt, conlist
except ImportError:
    # Pydantic v1
    from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist
from lightly.openapi_generated.swagger_client.models.scatter_plot_example_image import ScatterPlotExampleImage

class EmbeddingData2D(BaseModel):
    """
    EmbeddingData2D
    """
    input2d_embeddings: conlist(conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)) = Field(..., alias="input2dEmbeddings")
    datapool2d_embeddings: Optional[conlist(conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2))] = Field(None, alias="datapool2dEmbeddings")
    selected_excluding_datapool2d_embeddings: conlist(conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)) = Field(..., alias="selectedExcludingDatapool2dEmbeddings")
    example_images: conlist(ScatterPlotExampleImage) = Field(..., alias="exampleImages")
    __properties = ["input2dEmbeddings", "datapool2dEmbeddings", "selectedExcludingDatapool2dEmbeddings", "exampleImages"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True
        use_enum_values = True
        extra = "forbid"

    def to_str(self, by_alias: bool = False) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.dict(by_alias=by_alias))

    def to_json(self, by_alias: bool = False) -> str:
        """Returns the JSON representation of the model"""
        return json.dumps(self.to_dict(by_alias=by_alias))

    @classmethod
    def from_json(cls, json_str: str) -> EmbeddingData2D:
        """Create an instance of EmbeddingData2D from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, by_alias: bool = False):
        """Returns the dictionary representation of the model"""
        _dict = self.dict(by_alias=by_alias,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in example_images (list)
        _items = []
        if self.example_images:
            for _item in self.example_images:
                if _item:
                    _items.append(_item.to_dict(by_alias=by_alias))
            _dict['exampleImages' if by_alias else 'example_images'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EmbeddingData2D:
        """Create an instance of EmbeddingData2D from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EmbeddingData2D.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in EmbeddingData2D) in the input: " + str(obj))

        _obj = EmbeddingData2D.parse_obj({
            "input2d_embeddings": obj.get("input2dEmbeddings"),
            "datapool2d_embeddings": obj.get("datapool2dEmbeddings"),
            "selected_excluding_datapool2d_embeddings": obj.get("selectedExcludingDatapool2dEmbeddings"),
            "example_images": [ScatterPlotExampleImage.from_dict(_item) for _item in obj.get("exampleImages")] if obj.get("exampleImages") is not None else None
        })
        return _obj

