# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lightly.openapi_generated.swagger_client.configuration import Configuration


class SampleMetaData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom': 'dict(str, object)',
        'dynamic': 'dict(str, object)',
        'sharpness': 'float',
        'size_in_bytes': 'int',
        'snr': 'float',
        'mean': 'list[float]',
        'shape': 'list[int]',
        'std': 'list[float]',
        'sum_of_squares': 'list[float]',
        'sum_of_values': 'list[float]'
    }

    attribute_map = {
        'custom': 'custom',
        'dynamic': 'dynamic',
        'sharpness': 'sharpness',
        'size_in_bytes': 'sizeInBytes',
        'snr': 'snr',
        'mean': 'mean',
        'shape': 'shape',
        'std': 'std',
        'sum_of_squares': 'sumOfSquares',
        'sum_of_values': 'sumOfValues'
    }

    def __init__(self, custom=None, dynamic=None, sharpness=None, size_in_bytes=None, snr=None, mean=None, shape=None, std=None, sum_of_squares=None, sum_of_values=None, _configuration=None):  # noqa: E501
        """SampleMetaData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom = None
        self._dynamic = None
        self._sharpness = None
        self._size_in_bytes = None
        self._snr = None
        self._mean = None
        self._shape = None
        self._std = None
        self._sum_of_squares = None
        self._sum_of_values = None
        self.discriminator = None

        if custom is not None:
            self.custom = custom
        if dynamic is not None:
            self.dynamic = dynamic
        if sharpness is not None:
            self.sharpness = sharpness
        if size_in_bytes is not None:
            self.size_in_bytes = size_in_bytes
        if snr is not None:
            self.snr = snr
        if mean is not None:
            self.mean = mean
        if shape is not None:
            self.shape = shape
        if std is not None:
            self.std = std
        if sum_of_squares is not None:
            self.sum_of_squares = sum_of_squares
        if sum_of_values is not None:
            self.sum_of_values = sum_of_values

    @property
    def custom(self):
        """Gets the custom of this SampleMetaData.  # noqa: E501


        :return: The custom of this SampleMetaData.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this SampleMetaData.


        :param custom: The custom of this SampleMetaData.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom = custom

    @property
    def dynamic(self):
        """Gets the dynamic of this SampleMetaData.  # noqa: E501


        :return: The dynamic of this SampleMetaData.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._dynamic

    @dynamic.setter
    def dynamic(self, dynamic):
        """Sets the dynamic of this SampleMetaData.


        :param dynamic: The dynamic of this SampleMetaData.  # noqa: E501
        :type: dict(str, object)
        """

        self._dynamic = dynamic

    @property
    def sharpness(self):
        """Gets the sharpness of this SampleMetaData.  # noqa: E501


        :return: The sharpness of this SampleMetaData.  # noqa: E501
        :rtype: float
        """
        return self._sharpness

    @sharpness.setter
    def sharpness(self, sharpness):
        """Sets the sharpness of this SampleMetaData.


        :param sharpness: The sharpness of this SampleMetaData.  # noqa: E501
        :type: float
        """

        self._sharpness = sharpness

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this SampleMetaData.  # noqa: E501


        :return: The size_in_bytes of this SampleMetaData.  # noqa: E501
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this SampleMetaData.


        :param size_in_bytes: The size_in_bytes of this SampleMetaData.  # noqa: E501
        :type: int
        """

        self._size_in_bytes = size_in_bytes

    @property
    def snr(self):
        """Gets the snr of this SampleMetaData.  # noqa: E501


        :return: The snr of this SampleMetaData.  # noqa: E501
        :rtype: float
        """
        return self._snr

    @snr.setter
    def snr(self, snr):
        """Sets the snr of this SampleMetaData.


        :param snr: The snr of this SampleMetaData.  # noqa: E501
        :type: float
        """

        self._snr = snr

    @property
    def mean(self):
        """Gets the mean of this SampleMetaData.  # noqa: E501


        :return: The mean of this SampleMetaData.  # noqa: E501
        :rtype: list[float]
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this SampleMetaData.


        :param mean: The mean of this SampleMetaData.  # noqa: E501
        :type: list[float]
        """

        self._mean = mean

    @property
    def shape(self):
        """Gets the shape of this SampleMetaData.  # noqa: E501


        :return: The shape of this SampleMetaData.  # noqa: E501
        :rtype: list[int]
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this SampleMetaData.


        :param shape: The shape of this SampleMetaData.  # noqa: E501
        :type: list[int]
        """

        self._shape = shape

    @property
    def std(self):
        """Gets the std of this SampleMetaData.  # noqa: E501


        :return: The std of this SampleMetaData.  # noqa: E501
        :rtype: list[float]
        """
        return self._std

    @std.setter
    def std(self, std):
        """Sets the std of this SampleMetaData.


        :param std: The std of this SampleMetaData.  # noqa: E501
        :type: list[float]
        """

        self._std = std

    @property
    def sum_of_squares(self):
        """Gets the sum_of_squares of this SampleMetaData.  # noqa: E501


        :return: The sum_of_squares of this SampleMetaData.  # noqa: E501
        :rtype: list[float]
        """
        return self._sum_of_squares

    @sum_of_squares.setter
    def sum_of_squares(self, sum_of_squares):
        """Sets the sum_of_squares of this SampleMetaData.


        :param sum_of_squares: The sum_of_squares of this SampleMetaData.  # noqa: E501
        :type: list[float]
        """

        self._sum_of_squares = sum_of_squares

    @property
    def sum_of_values(self):
        """Gets the sum_of_values of this SampleMetaData.  # noqa: E501


        :return: The sum_of_values of this SampleMetaData.  # noqa: E501
        :rtype: list[float]
        """
        return self._sum_of_values

    @sum_of_values.setter
    def sum_of_values(self, sum_of_values):
        """Sets the sum_of_values of this SampleMetaData.


        :param sum_of_values: The sum_of_values of this SampleMetaData.  # noqa: E501
        :type: list[float]
        """

        self._sum_of_values = sum_of_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SampleMetaData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleMetaData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SampleMetaData):
            return True

        return self.to_dict() != other.to_dict()
