# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lightly.openapi_generated.swagger_client.configuration import Configuration


class SampleData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoObjectID',
<<<<<<< HEAD
        'dataset_id': 'MongoObjectID',
        'file_name': 'str',
        'thumb_name': 'str',
        'meta_data': 'SampleMetaData',
        'index': 'int',
        'created_at': 'Timestamp',
        'last_modified_at': 'Timestamp'
    }

    attribute_map = {
        'id': 'id',
        'dataset_id': 'datasetId',
        'file_name': 'fileName',
        'thumb_name': 'thumbName',
        'meta_data': 'metaData',
        'index': 'index',
        'created_at': 'createdAt',
        'last_modified_at': 'lastModifiedAt'
    }

    def __init__(self, id=None, dataset_id=None, file_name=None, thumb_name=None, meta_data=None, index=None, created_at=None, last_modified_at=None, _configuration=None):  # noqa: E501
=======
        'is_thumbnail': 'bool',
        'thumb_name': 'str',
        'meta': 'SampleMetaData'
    }

    attribute_map = {
        'id': '_id',
        'is_thumbnail': 'isThumbnail',
        'thumb_name': 'thumbName',
        'meta': 'meta'
    }

    def __init__(self, id=None, is_thumbnail=None, thumb_name=None, meta=None, _configuration=None):  # noqa: E501
>>>>>>> aaec1d1... Openapi generated client: v3 on develop_active_learning_branch (#129)
        """SampleData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
<<<<<<< HEAD
        self._dataset_id = None
        self._file_name = None
        self._thumb_name = None
        self._meta_data = None
        self._index = None
        self._created_at = None
        self._last_modified_at = None
        self.discriminator = None

        self.id = id
        if dataset_id is not None:
            self.dataset_id = dataset_id
        self.file_name = file_name
        if thumb_name is not None:
            self.thumb_name = thumb_name
        if meta_data is not None:
            self.meta_data = meta_data
        if index is not None:
            self.index = index
        if created_at is not None:
            self.created_at = created_at
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
=======
        self._is_thumbnail = None
        self._thumb_name = None
        self._meta = None
        self.discriminator = None

        self.id = id
        self.is_thumbnail = is_thumbnail
        self.thumb_name = thumb_name
        self.meta = meta
>>>>>>> aaec1d1... Openapi generated client: v3 on develop_active_learning_branch (#129)

    @property
    def id(self):
        """Gets the id of this SampleData.  # noqa: E501


        :return: The id of this SampleData.  # noqa: E501
        :rtype: MongoObjectID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SampleData.


        :param id: The id of this SampleData.  # noqa: E501
        :type: MongoObjectID
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
<<<<<<< HEAD
    def dataset_id(self):
        """Gets the dataset_id of this SampleData.  # noqa: E501


        :return: The dataset_id of this SampleData.  # noqa: E501
        :rtype: MongoObjectID
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this SampleData.


        :param dataset_id: The dataset_id of this SampleData.  # noqa: E501
        :type: MongoObjectID
        """

        self._dataset_id = dataset_id

    @property
    def file_name(self):
        """Gets the file_name of this SampleData.  # noqa: E501


        :return: The file_name of this SampleData.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SampleData.


        :param file_name: The file_name of this SampleData.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name
=======
    def is_thumbnail(self):
        """Gets the is_thumbnail of this SampleData.  # noqa: E501


        :return: The is_thumbnail of this SampleData.  # noqa: E501
        :rtype: bool
        """
        return self._is_thumbnail

    @is_thumbnail.setter
    def is_thumbnail(self, is_thumbnail):
        """Sets the is_thumbnail of this SampleData.


        :param is_thumbnail: The is_thumbnail of this SampleData.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_thumbnail is None:
            raise ValueError("Invalid value for `is_thumbnail`, must not be `None`")  # noqa: E501

        self._is_thumbnail = is_thumbnail
>>>>>>> aaec1d1... Openapi generated client: v3 on develop_active_learning_branch (#129)

    @property
    def thumb_name(self):
        """Gets the thumb_name of this SampleData.  # noqa: E501


        :return: The thumb_name of this SampleData.  # noqa: E501
        :rtype: str
        """
        return self._thumb_name

    @thumb_name.setter
    def thumb_name(self, thumb_name):
        """Sets the thumb_name of this SampleData.


        :param thumb_name: The thumb_name of this SampleData.  # noqa: E501
        :type: str
        """
<<<<<<< HEAD
=======
        if self._configuration.client_side_validation and thumb_name is None:
            raise ValueError("Invalid value for `thumb_name`, must not be `None`")  # noqa: E501
>>>>>>> aaec1d1... Openapi generated client: v3 on develop_active_learning_branch (#129)

        self._thumb_name = thumb_name

    @property
<<<<<<< HEAD
    def meta_data(self):
        """Gets the meta_data of this SampleData.  # noqa: E501


        :return: The meta_data of this SampleData.  # noqa: E501
        :rtype: SampleMetaData
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this SampleData.


        :param meta_data: The meta_data of this SampleData.  # noqa: E501
        :type: SampleMetaData
        """

        self._meta_data = meta_data

    @property
    def index(self):
        """Gets the index of this SampleData.  # noqa: E501


        :return: The index of this SampleData.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this SampleData.


        :param index: The index of this SampleData.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def created_at(self):
        """Gets the created_at of this SampleData.  # noqa: E501


        :return: The created_at of this SampleData.  # noqa: E501
        :rtype: Timestamp
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SampleData.


        :param created_at: The created_at of this SampleData.  # noqa: E501
        :type: Timestamp
        """

        self._created_at = created_at

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this SampleData.  # noqa: E501


        :return: The last_modified_at of this SampleData.  # noqa: E501
        :rtype: Timestamp
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this SampleData.


        :param last_modified_at: The last_modified_at of this SampleData.  # noqa: E501
        :type: Timestamp
        """

        self._last_modified_at = last_modified_at
=======
    def meta(self):
        """Gets the meta of this SampleData.  # noqa: E501


        :return: The meta of this SampleData.  # noqa: E501
        :rtype: SampleMetaData
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this SampleData.


        :param meta: The meta of this SampleData.  # noqa: E501
        :type: SampleMetaData
        """
        if self._configuration.client_side_validation and meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta
>>>>>>> aaec1d1... Openapi generated client: v3 on develop_active_learning_branch (#129)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SampleData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SampleData):
            return True

        return self.to_dict() != other.to_dict()
