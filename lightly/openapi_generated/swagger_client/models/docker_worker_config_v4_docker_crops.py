# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
try:
    # Pydantic >=v1.10.17
    from pydantic.v1 import BaseModel, Field, StrictBool, conlist, constr, validator
except ImportError:
    # Pydantic v1
    from pydantic import BaseModel, Field, StrictBool, conlist, constr, validator

class DockerWorkerConfigV4DockerCrops(BaseModel):
    """
    DockerWorkerConfigV4DockerCrops
    """
    enable_upload: Optional[StrictBool] = Field(True, alias="enableUpload", description="If false, no crop dataset is created nor are the crops uploaded to the bucket. Predictions (e.g bounding boxes) will be created on the main dataset regardless. ")
    enable_upload_for_tasks: Optional[conlist(constr(strict=True))] = Field(None, alias="enableUploadForTasks", description="Array of tasks (prediction tasks and autoTasks) for which the crop dataset creation and upload is enabled. If unset, all tasks are uploaded by default.  ")
    __properties = ["enableUpload", "enableUploadForTasks"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True
        use_enum_values = True
        extra = "forbid"

    def to_str(self, by_alias: bool = False) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.dict(by_alias=by_alias))

    def to_json(self, by_alias: bool = False) -> str:
        """Returns the JSON representation of the model"""
        return json.dumps(self.to_dict(by_alias=by_alias))

    @classmethod
    def from_json(cls, json_str: str) -> DockerWorkerConfigV4DockerCrops:
        """Create an instance of DockerWorkerConfigV4DockerCrops from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, by_alias: bool = False):
        """Returns the dictionary representation of the model"""
        _dict = self.dict(by_alias=by_alias,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if enable_upload_for_tasks (nullable) is None
        # and __fields_set__ contains the field
        if self.enable_upload_for_tasks is None and "enable_upload_for_tasks" in self.__fields_set__:
            _dict['enableUploadForTasks' if by_alias else 'enable_upload_for_tasks'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DockerWorkerConfigV4DockerCrops:
        """Create an instance of DockerWorkerConfigV4DockerCrops from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DockerWorkerConfigV4DockerCrops.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in DockerWorkerConfigV4DockerCrops) in the input: " + str(obj))

        _obj = DockerWorkerConfigV4DockerCrops.parse_obj({
            "enable_upload": obj.get("enableUpload") if obj.get("enableUpload") is not None else True,
            "enable_upload_for_tasks": obj.get("enableUploadForTasks")
        })
        return _obj

