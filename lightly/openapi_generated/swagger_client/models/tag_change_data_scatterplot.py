# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@lightly.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lightly.openapi_generated.swagger_client.configuration import Configuration


class TagChangeDataScatterplot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'method': 'TagChangeDataOperationMethod',
        'view': 'str',
        'count': 'float',
        'added': 'float',
        'removed': 'float'
    }

    attribute_map = {
        'method': 'method',
        'view': 'view',
        'count': 'count',
        'added': 'added',
        'removed': 'removed'
    }

    def __init__(self, method=None, view=None, count=None, added=None, removed=None, _configuration=None):  # noqa: E501
        """TagChangeDataScatterplot - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._method = None
        self._view = None
        self._count = None
        self._added = None
        self._removed = None
        self.discriminator = None

        self.method = method
        if view is not None:
            self.view = view
        self.count = count
        self.added = added
        self.removed = removed

    @property
    def method(self):
        """Gets the method of this TagChangeDataScatterplot.  # noqa: E501


        :return: The method of this TagChangeDataScatterplot.  # noqa: E501
        :rtype: TagChangeDataOperationMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this TagChangeDataScatterplot.


        :param method: The method of this TagChangeDataScatterplot.  # noqa: E501
        :type: TagChangeDataOperationMethod
        """
        if self._configuration.client_side_validation and method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def view(self):
        """Gets the view of this TagChangeDataScatterplot.  # noqa: E501


        :return: The view of this TagChangeDataScatterplot.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this TagChangeDataScatterplot.


        :param view: The view of this TagChangeDataScatterplot.  # noqa: E501
        :type: str
        """

        self._view = view

    @property
    def count(self):
        """Gets the count of this TagChangeDataScatterplot.  # noqa: E501


        :return: The count of this TagChangeDataScatterplot.  # noqa: E501
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TagChangeDataScatterplot.


        :param count: The count of this TagChangeDataScatterplot.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def added(self):
        """Gets the added of this TagChangeDataScatterplot.  # noqa: E501


        :return: The added of this TagChangeDataScatterplot.  # noqa: E501
        :rtype: float
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this TagChangeDataScatterplot.


        :param added: The added of this TagChangeDataScatterplot.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and added is None:
            raise ValueError("Invalid value for `added`, must not be `None`")  # noqa: E501

        self._added = added

    @property
    def removed(self):
        """Gets the removed of this TagChangeDataScatterplot.  # noqa: E501


        :return: The removed of this TagChangeDataScatterplot.  # noqa: E501
        :rtype: float
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this TagChangeDataScatterplot.


        :param removed: The removed of this TagChangeDataScatterplot.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and removed is None:
            raise ValueError("Invalid value for `removed`, must not be `None`")  # noqa: E501

        self._removed = removed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagChangeDataScatterplot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagChangeDataScatterplot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TagChangeDataScatterplot):
            return True

        return self.to_dict() != other.to_dict()
