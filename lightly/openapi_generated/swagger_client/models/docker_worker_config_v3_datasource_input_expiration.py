# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import Extra,  BaseModel, Field, confloat, conint
from lightly.openapi_generated.swagger_client.models.expiry_handling_strategy_v3 import ExpiryHandlingStrategyV3

class DockerWorkerConfigV3DatasourceInputExpiration(BaseModel):
    """
    Images that expire in less than the specified number of days are handled specially. Given the handling strategy, these images are either skipped or the worker breaks if encountering any of them. 
    """
    min_days_to_expiration: Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)] = Field(..., alias="minDaysToExpiration")
    handling_strategy: ExpiryHandlingStrategyV3 = Field(..., alias="handlingStrategy")
    __properties = ["minDaysToExpiration", "handlingStrategy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True
        use_enum_values = True
        extra = Extra.forbid

    def to_str(self, by_alias: bool = False) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.dict(by_alias=by_alias))

    def to_json(self, by_alias: bool = False) -> str:
        """Returns the JSON representation of the model"""
        return json.dumps(self.to_dict(by_alias=by_alias))

    @classmethod
    def from_json(cls, json_str: str) -> DockerWorkerConfigV3DatasourceInputExpiration:
        """Create an instance of DockerWorkerConfigV3DatasourceInputExpiration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, by_alias: bool = False):
        """Returns the dictionary representation of the model"""
        _dict = self.dict(by_alias=by_alias,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DockerWorkerConfigV3DatasourceInputExpiration:
        """Create an instance of DockerWorkerConfigV3DatasourceInputExpiration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DockerWorkerConfigV3DatasourceInputExpiration.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in DockerWorkerConfigV3DatasourceInputExpiration) in the input: " + str(obj))

        _obj = DockerWorkerConfigV3DatasourceInputExpiration.parse_obj({
            "min_days_to_expiration": obj.get("minDaysToExpiration"),
            "handling_strategy": obj.get("handlingStrategy")
        })
        return _obj

