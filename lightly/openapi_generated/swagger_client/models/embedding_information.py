# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



try:
    # Pydantic >=v1.10.17
    from pydantic.v1 import BaseModel, Field
except ImportError:
    # Pydantic v1
    from pydantic import BaseModel, Field
from lightly.openapi_generated.swagger_client.models.numeric_distribution_per_set import NumericDistributionPerSet
from lightly.openapi_generated.swagger_client.models.scatter_plot_data import ScatterPlotData

class EmbeddingInformation(BaseModel):
    """
    EmbeddingInformation
    """
    distance_to_nearest_neighbor_in_set: NumericDistributionPerSet = Field(..., alias="distanceToNearestNeighborInSet")
    distance_to_cover_input: NumericDistributionPerSet = Field(..., alias="distanceToCoverInput")
    scatter_plot_data: ScatterPlotData = Field(..., alias="scatterPlotData")
    __properties = ["distanceToNearestNeighborInSet", "distanceToCoverInput", "scatterPlotData"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True
        use_enum_values = True
        extra = "forbid"

    def to_str(self, by_alias: bool = False) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.dict(by_alias=by_alias))

    def to_json(self, by_alias: bool = False) -> str:
        """Returns the JSON representation of the model"""
        return json.dumps(self.to_dict(by_alias=by_alias))

    @classmethod
    def from_json(cls, json_str: str) -> EmbeddingInformation:
        """Create an instance of EmbeddingInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, by_alias: bool = False):
        """Returns the dictionary representation of the model"""
        _dict = self.dict(by_alias=by_alias,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of distance_to_nearest_neighbor_in_set
        if self.distance_to_nearest_neighbor_in_set:
            _dict['distanceToNearestNeighborInSet' if by_alias else 'distance_to_nearest_neighbor_in_set'] = self.distance_to_nearest_neighbor_in_set.to_dict(by_alias=by_alias)
        # override the default output from pydantic by calling `to_dict()` of distance_to_cover_input
        if self.distance_to_cover_input:
            _dict['distanceToCoverInput' if by_alias else 'distance_to_cover_input'] = self.distance_to_cover_input.to_dict(by_alias=by_alias)
        # override the default output from pydantic by calling `to_dict()` of scatter_plot_data
        if self.scatter_plot_data:
            _dict['scatterPlotData' if by_alias else 'scatter_plot_data'] = self.scatter_plot_data.to_dict(by_alias=by_alias)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EmbeddingInformation:
        """Create an instance of EmbeddingInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EmbeddingInformation.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in EmbeddingInformation) in the input: " + str(obj))

        _obj = EmbeddingInformation.parse_obj({
            "distance_to_nearest_neighbor_in_set": NumericDistributionPerSet.from_dict(obj.get("distanceToNearestNeighborInSet")) if obj.get("distanceToNearestNeighborInSet") is not None else None,
            "distance_to_cover_input": NumericDistributionPerSet.from_dict(obj.get("distanceToCoverInput")) if obj.get("distanceToCoverInput") is not None else None,
            "scatter_plot_data": ScatterPlotData.from_dict(obj.get("scatterPlotData")) if obj.get("scatterPlotData") is not None else None
        })
        return _obj

