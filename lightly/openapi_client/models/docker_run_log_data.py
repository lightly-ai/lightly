# coding: utf-8

"""
    Lightly API

    Lightly.ai enables you to do self-supervised learning in an easy and intuitive way. The lightly.ai OpenAPI spec defines how one can interact with our REST API to unleash the full potential of lightly.ai  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightly.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from typing_extensions import Annotated



from typing import List, Optional
from pydantic import Extra,  BaseModel, Field, conint, conlist
from lightly.openapi_client.models.docker_run_log_entry_data import DockerRunLogEntryData

class DockerRunLogData(BaseModel):
    """
    DockerRunLogData
    """
    cursor: Optional[conint(strict=True, ge=0)] = Field(0, description="The cursor to use to fetch more logs.")
    logs: conlist(DockerRunLogEntryData) = Field(...)
    __properties = ["cursor", "logs"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        use_enum_values = True
        extra = Extra.forbid

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DockerRunLogData:
        """Create an instance of DockerRunLogData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in logs (list)
        _items = []
        if self.logs:
            for _item in self.logs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['logs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DockerRunLogData:
        """Create an instance of DockerRunLogData from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DockerRunLogData.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in DockerRunLogData) in the input: " + str(obj))

        _obj = DockerRunLogData.parse_obj({
            "cursor": obj.get("cursor") if obj.get("cursor") is not None else 0,
            "logs": [DockerRunLogEntryData.from_dict(_item) for _item in obj.get("logs")] if obj.get("logs") is not None else None
        })
        return _obj


